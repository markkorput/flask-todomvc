// Generated by CoffeeScript 1.6.3
(function() {
  var GraphLines, VisualSettings, VisualState, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.GameVisuals = (function() {
    function GameVisuals(_opts) {
      this.options = _opts;
      this.two = new Two({
        autostart: true,
        fullscreen: false,
        type: Two.Types.svg
      }).appendTo(document.body);
      $(window).on('resize', this._resize);
      this.visual_settings = new VisualSettings({
        two: this.two
      });
      this._initScene();
      if (this.options.game_states) {
        this.options.game_states.on('add', this._transitionToState, this);
      }
    }

    GameVisuals.prototype._resize = function() {
      if (!this.two) {
        return;
      }
      this.two.renderer.setSize($(window).width(), $(window).height());
      this.two.width = this.two.renderer.width;
      return this.two.height = this.two.renderer.height;
    };

    GameVisuals.prototype._initScene = function() {
      var bg;
      bg = this.two.makeRectangle(this.two.width / 2, this.two.height / 2, this.two.width, this.two.height);
      bg.fill = '#92adac';
      bg.noStroke();
      this.two.add(bg);
      return this.graph_lines = new GraphLines({
        two: this.two,
        game_states: this.options.game_states,
        visual_settings: this.visual_settings
      });
    };

    GameVisuals.prototype.previousState = function() {
      return this.options.game_states.at(this.options.game_states.length - 2);
    };

    GameVisuals.prototype._transitionToState = function(newState) {};

    return GameVisuals;

  })();

  GraphLines = (function() {
    function GraphLines(_opts) {
      this.options = _opts;
      this.two = _opts.two;
      this.game_states = _opts.game_states;
      this.visual_settings = _opts.visual_settings;
      this._initScene();
      this.game_states.on('add', this._growNewState, this);
    }

    GraphLines.prototype._group = function() {
      if (this.group) {
        return this.group;
      }
      this.group = this.two.makeGroup();
      this.group.translation.set(0, this.visual_settings.get('verticalBase'));
      return this.group;
    };

    GraphLines.prototype._skillLine = function(skill) {
      this._skillLines || (this._skillLines = {});
      if (this._skillLines[skill.get('text')]) {
        return this._skillLines[skill.get('text')];
      }
      return this._setSkillLinePoints(skill, []);
    };

    GraphLines.prototype._setSkillLinePoints = function(skill, points) {
      var poly;
      poly = new Two.Polygon(points, true, false);
      if (this._skillLines[skill.get('text')]) {
        this._group().remove(this._skillLines[skill.get('text')]);
      }
      this._skillLines[skill.get('text')] = poly;
      poly.addTo(this._group());
      poly.fill = '#FF0000';
      poly.noStroke();
      return poly;
    };

    GraphLines.prototype._initScene = function() {
      var _this = this;
      return this.game_states.each(function(state) {
        return state.get('skills').each(function(skill) {
          return _this.growLine(skill, state);
        });
      });
    };

    GraphLines.prototype.growLine = function(skill) {
      var line, point1, point2, second_half, vertices, x, y;
      line = this._skillLine(skill);
      vertices = line.vertices || [];
      x = vertices.length / 2 * this.two.width;
      y = this.visual_settings.get('verticalScale') * skill.get('score');
      point1 = new Two.Anchor(x, y + this.visual_settings.get('lineFatness') / 2);
      point2 = new Two.Anchor(x, y - this.visual_settings.get('lineFatness') / 2);
      if (vertices.length > 0) {
        second_half = _.map(_.range(vertices.length / 2, vertices.length / 2 - 1), function(i) {
          return vertices[i];
        });
        vertices = _.map(_.range(vertices.length / 2), function(i) {
          return vertices[i];
        });
        $.merge(vertices, $.merge([point1, point2], second_half));
      } else {
        vertices = [point1, point2];
      }
      return this._setSkillLinePoints(skill, vertices);
    };

    GraphLines.prototype._growNewState = function(newState) {
      var _this = this;
      newState.get('skills').each(function(skill) {
        return _this.growLine(skill);
      });
      return this._group().scale = this._targetScale();
    };

    GraphLines.prototype._targetScale = function() {
      var bound, scale;
      bound = this._group().getBoundingClientRect();
      return scale = 1 / ((bound.width / this._group().scale) / this.two.width);
    };

    return GraphLines;

  })();

  VisualState = (function() {
    function VisualState(_state, _opts) {
      this.state = _state;
      this.options = _opts || {};
    }

    return VisualState;

  })();

  VisualSettings = (function(_super) {
    __extends(VisualSettings, _super);

    function VisualSettings() {
      _ref = VisualSettings.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VisualSettings.prototype.defaults = {
      verticalScale: 100,
      verticalBase: 0,
      lineFatness: 3
    };

    VisualSettings.prototype.initialize = function() {
      if (this.get('two')) {
        return this.set({
          verticalBase: this.get('two').height / 2
        });
      }
    };

    return VisualSettings;

  })(Backbone.Model);

}).call(this);
