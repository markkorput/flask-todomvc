// Generated by CoffeeScript 1.6.3
(function() {
  var GraphLine, GraphLines, GraphLinesOps, VisualSettings, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.GameVisuals = (function() {
    function GameVisuals(_opts) {
      this.options = _opts;
      this.two = new Two({
        autostart: true,
        fullscreen: true,
        type: Two.Types.svg
      }).appendTo(document.body);
      $(window).on('resize', this._resize);
      this.visual_settings = new VisualSettings({
        two: this.two,
        game_states: this.options.game_states
      });
      this._initScene();
      this.two.bind('update', function() {
        return TWEEN.update();
      });
    }

    GameVisuals.prototype._resize = function() {
      if (!this.two) {
        return;
      }
      this.two.renderer.setSize($(window).width(), $(window).height());
      this.two.width = this.two.renderer.width;
      return this.two.height = this.two.renderer.height;
    };

    GameVisuals.prototype._initScene = function() {
      var bg;
      bg = this.two.makeRectangle(this.two.width / 2, this.two.height / 2, this.two.width, this.two.height);
      bg.fill = '#92adac';
      bg.noStroke();
      this.two.add(bg);
      this.graph_lines = new GraphLines({
        two: this.two,
        game_states: this.options.game_states,
        visual_settings: this.visual_settings
      });
      return this.graph_lines_ops = new GraphLinesOps({
        target: this.graph_lines
      });
    };

    GameVisuals.prototype.previousState = function() {
      return this.options.game_states.at(this.options.game_states.length - 2);
    };

    return GameVisuals;

  })();

  GraphLine = (function(_super) {
    __extends(GraphLine, _super);

    function GraphLine(_opts) {
      this.options = _opts;
      this.two = _opts.two;
      this.game_states = _opts.game_states;
      this.visual_settings = _opts.visual_settings;
      this.skill = _opts.skill;
      this.group = this.two.makeGroup();
      this.group.translation.set(0, 0);
      this._initPolygons();
      this.game_states.on('add', this._growNewState, this);
    }

    GraphLine.prototype._initPolygons = function() {
      var _this = this;
      return _.each(_.range(1, this.game_states.length - 1), function(i) {
        return _this._initState(_this.game_states.at(i - 1), _this.game_states.at(i), i);
      });
    };

    GraphLine.prototype._initState = function(prevState, state, idx) {
      var prevSkill, skill,
        _this = this;
      skill = state.get('skills').find(function(_skill) {
        return _skill.get('text') === _this.skill.get('text');
      });
      prevSkill = prevState.get('skills').find(function(_skill) {
        return _skill.get('text') === _this.skill.get('text');
      });
      if (skill && prevSkill) {
        return this._addLine(prevSkill, skill, idx);
      }
    };

    GraphLine.prototype._addLine = function(prevSkill, skill, index) {
      var line, x1, x2, y1, y2;
      x1 = (index - 1) * this.visual_settings.get('horizontalScale');
      y1 = this.yForScore(prevSkill.get('score'));
      x2 = x1 + this.visual_settings.get('horizontalScale');
      y2 = this.yForScore(skill.get('score'));
      line = this.two.makeLine(x1, y1, x2, y2);
      line.stroke = '#ff0000';
      line.linewidth = this.visual_settings.get('lineFatness');
      return line.addTo(this.group);
    };

    GraphLine.prototype._growNewState = function(newState) {
      var prevState;
      prevState = this.game_states.at(this.options.game_states.length - 2);
      return this._initState(prevState, newState, this.game_states.length - 1);
    };

    GraphLine.prototype.yForScore = function(score) {
      return this.visual_settings.scoreToScreenFactor() * score * this.visual_settings.get('verticalScaler');
    };

    return GraphLine;

  })(Backbone.Model);

  GraphLines = (function(_super) {
    __extends(GraphLines, _super);

    function GraphLines(_opts) {
      this.options = _opts;
      this.two = _opts.two;
      this.game_states = _opts.game_states;
      this.visual_settings = _opts.visual_settings;
      this.group = this.two.makeGroup();
      this.group.translation.set(0, this.visual_settings.get('verticalBase'));
      this._initScene();
    }

    GraphLines.prototype._group = function() {
      return this.group;
    };

    GraphLines.prototype._initScene = function() {
      var _this = this;
      if (this.game_states && this.game_states.first()) {
        return this.graph_lines = this.game_states.first().get('skills').map(function(skill) {
          var gl;
          gl = new GraphLine({
            two: _this.two,
            game_states: _this.game_states,
            visual_settings: _this.visual_settings,
            skill: skill
          });
          gl.group.addTo(_this.group);
          return gl;
        });
      }
    };

    return GraphLines;

  })(Backbone.Model);

  GraphLinesOps = (function() {
    function GraphLinesOps(_opts) {
      var _this = this;
      this.options = _opts || {};
      this.target = _opts.target || _opts.graph_lines;
      this.two = this.target.two;
      this.target._group().translation.set(this.two.width, this.target.visual_settings.desiredBaseline());
      this.target.game_states.on('add', function() {
        return _this.scrollTween().start();
      });
      this.target.visual_settings.on('change:verticalBase', function(model, val, obj) {
        return _this.baselineShiftTween(model.desiredBaseline()).start();
      });
      this.target.visual_settings.on('change:scoreRange', function(model, val, obj) {
        return _this.rangeShiftTween(model.previous('scoreRange'), val).start();
      });
    }

    GraphLinesOps.prototype.scrollTween = function() {
      var tween;
      return tween = new TWEEN.Tween(this.target._group().translation).to({
        x: this.target._group().translation.x - this.target.visual_settings.get('horizontalScale')
      }, 500).easing(TWEEN.Easing.Exponential.InOut);
    };

    GraphLinesOps.prototype.baselineShiftTween = function(toY) {
      var tween;
      return tween = new TWEEN.Tween(this.target._group().translation).to({
        y: toY
      }, 500).easing(TWEEN.Easing.Exponential.InOut);
    };

    GraphLinesOps.prototype.rangeShiftTween = function(from, to) {
      var scaleFactor, tween,
        _this = this;
      scaleFactor = from / to;
      console.log('rangeShiftTween: ' + scaleFactor);
      return tween = new TWEEN.Tween({
        y: 0
      }).to({
        y: 1
      }, 500).easing(TWEEN.Easing.Exponential.InOut).onStart(function() {
        return _.each(_this.target._group().children, function(polygon, nr) {
          return _.each(polygon.vertices, function(vertice) {
            return new TWEEN.Tween(vertice).to({
              y: vertice.y * scaleFactor
            }).easing(TWEEN.Easing.Exponential.InOut).start();
          });
        });
      });
    };

    GraphLinesOps.prototype.shrinkTween = function() {
      var toLineWidth, toScale, tween;
      toScale = this._shrinkScale();
      toLineWidth = this.target.visual_settings.get('lineFatness') / toScale;
      return tween = new TWEEN.Tween(this.target._group()).to({
        scale: toScale,
        linewidth: toLineWidth
      }, 500).easing(TWEEN.Easing.Exponential.InOut);
    };

    GraphLinesOps.prototype._shrinkScale = function() {
      var bound, scale;
      bound = this.target._group().getBoundingClientRect();
      return scale = 1 / ((bound.width / this.target._group().scale) / this.two.width);
    };

    return GraphLinesOps;

  })();

  VisualSettings = (function(_super) {
    __extends(VisualSettings, _super);

    function VisualSettings() {
      _ref = VisualSettings.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VisualSettings.prototype.defaults = {
      horizontalScale: 300,
      verticalBase: 0,
      lineFatness: 3,
      scoreRange: 5,
      verticalScaler: 1
    };

    VisualSettings.prototype.initialize = function() {
      this.calculate();
      if (this.get('game_states')) {
        return this.get('game_states').on('add', this.calculate, this);
      }
    };

    VisualSettings.prototype.calculate = function() {
      return this.set({
        verticalBase: this.desiredBaseline()
      });
    };

    VisualSettings.prototype._allScores = function() {
      return _.flatten((this.get('game_states') || new Backbone.Collection()).map(function(state) {
        return state.get('skills').map(function(skill) {
          return skill.get('score');
        });
      }));
    };

    VisualSettings.prototype.maxScore = function() {
      return _.max(this._allScores());
    };

    VisualSettings.prototype.minScore = function() {
      return _.min(this._allScores());
    };

    VisualSettings.prototype.avgScore = function() {
      return this.minScore() + this.deltaScore() / 2;
    };

    VisualSettings.prototype.deltaScore = function() {
      return this.maxScore() - this.minScore();
    };

    VisualSettings.prototype.scoreToScreenFactor = function() {
      if (this.get('scoreRange') === 0) {
        return 1;
      }
      return this.get('two').height / -this.get('scoreRange');
    };

    VisualSettings.prototype.desiredBaseline = function() {
      if (this.deltaScore() === 0) {
        return this.get('two').height / 2;
      }
      return this.get('two').height / 2 - this.avgScore() * this.scoreToScreenFactor();
    };

    return VisualSettings;

  })(Backbone.Model);

}).call(this);
