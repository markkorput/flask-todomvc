// Generated by CoffeeScript 1.6.3
(function() {
  var Game, GameList, GameListView, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      _ref = Game.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Game.prototype.defaults = {
      created_at: new Date()
    };

    return Game;

  })(Backbone.Model);

  GameList = (function(_super) {
    __extends(GameList, _super);

    GameList.prototype.model = Game;

    GameList.prototype.localStorage = new Backbone.LocalStorage("todos-backbone");

    function GameList(_opts) {
      GameList.__super__.constructor.call(this);
    }

    return GameList;

  })(Backbone.Collection);

  GameListView = (function(_super) {
    __extends(GameListView, _super);

    function GameListView() {
      _ref1 = GameListView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    GameListView.prototype.tagName = "ul";

    GameListView.prototype.className = "games-list";

    GameListView.prototype.initialize = function() {
      this.games = new GameList;
      return this.games.fetch();
    };

    GameListView.prototype.render = function() {
      var _this = this;
      this.$el.html('<h1>Games</h1>');
      this.games.each(function(game) {
        return _this.$el.append('<li>Creation Date: ' + game.get('created_at') + '</li>');
      });
      return this;
    };

    return GameListView;

  })(Backbone.View);

  this.GameView = (function(_super) {
    __extends(GameView, _super);

    function GameView() {
      _ref2 = GameView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    GameView.prototype.initialize = function() {
      this.games = new GameList;
      this.games.fetch();
      if (this.games.length < 1) {
        this.games.create({});
      }
      this.game = this.games.last();
      console.log(this.game);
      return this.render();
    };

    GameView.prototype.render = function() {
      this.$el.html('');
      return this.$el.append(new GameListView().render().el);
    };

    return GameView;

  })(Backbone.View);

}).call(this);
